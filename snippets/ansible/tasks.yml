---

- name: Create directories recursively
  ansible.builtin.file:
    path: /tmp/path/to/final/dir
    state: directory

- name: Import tasks
  block:
    - name: By using absolute paths and special variables (preferred)
      ansible.builtin.import_tasks:
        file: "{{ role_path }}/tasks/install/{{ install_method }}.yml"
    - name: By using paths relative to the including file
      ansible.builtin.import_tasks:
        file: pre-flight.yml

- name: Conditionally include tasks
  block:
    - name: by leveraging the 'with_fileglob' loop filter (preferred)
      ansible.builtin.include_tasks:
        file: "{{ item }}"
      with_fileglob: "{{ install_method }}.yml"
    - name: by checking the files' existence
      vars:
        filename: "{{ install_method }}.yml"
      when: lookup('ansible.builtin.fileglob', filename) != []
      ansible.builtin.import_tasks:
        file: "{{ filename }}"

- name: Assertions
  ansible.builtin.assert:
    that:
      - install_method in supported_install_methods
      - external_url is ansible.builtin.url
    fail_msg: What to say if any of the above conditions fail
    success_msg: What to say if all of the above conditions succeed

- name: Pretty print information
  ansible.builtin.debug:
    msg: >-
      {{
        dict([
          [ 'install_method', install_method ],
          [ 'install_method in supported_install_methods', install_method in supported_install_methods ],
        ])
      }}

- name: Generate passwords
  block:
    - name: Randomly
      ansible.builtin.debug:
        msg: "{{ lookup('ansible.builtin.password', '/dev/null') }}"
    - name: Specifying requirements
      ansible.builtin.debug:
        msg: "{{ lookup('ansible.builtin.password', '/dev/null length=32 chars=ascii_letters,digits,punctuation') }}"
    - name: Random but idempotent, so it will not change at every execution
      ansible.builtin.debug:
        msg: "{{ lookup('ansible.builtin.password', '/dev/null', seed=inventory_hostname) }}"

- name: Run containers
  community.docker.docker_container:
    name: gitlab
    image: gitlab/gitlab-ce:16.11.2-ce.0
    hostname: gitlab.lan
    published_ports:
      - "8022:22"
      - "8080:80"
      - "8443:443"
    env:
      GITLAB_OMNIBUS_CONFIG: >-
        external_url 'http://gitlab.lan';
    shm_size: 256m
    volumes:
      - ./config:/etc/gitlab:Z
      - ./logs:/var/log/gitlab:Z
      - ./data:/var/opt/gitlab:Z
    auto_remove: true

- name: Manipulate lists
  block:
    - name: Add elements to lists
      set_fact:
        programming_languages: "{{ programming_languages + ['Ruby'] }}"
    - name: Sort dict elements in list by attribute
      vars:
        snapshots:
          - name: sales
            create_time: '2024-06-25T00:52:55.127000+00:00'
          - name: test
            create_time: '2024-05-17T01:53:12.103220+00:00'
      set_fact:
        snapshot_latest: "{{ snapshots | sort(attribute='create_time') | last }}"
    - name: Give back the first not null value (coalesce-like)
      vars:
        list_with_null_values:
          - null
          - null
          - something
          - something else
      set_fact:
        first_non_null_value: "{{ list_with_null_values | select | first }}"

- name: Manipulate dictionaries
  block:
    - name: Merge dictionaries
      vars:
        dict_1:
          a: 43
          b: some string
        dict_2:
          y: true
          z:
            - 4
            - test
      set_fact:
        merged_dict: "{{ dict1 | ansible.builtin.combine(dict_2, {'z':'new_value','w':[44]}) }}"
        recursively_merged_dict: >-
          {{ {'rest':'test'} | ansible.builtin.combine({'z':'new_value','w':[44]}, dict_1, dict_2, recursive=true) }}

- name: "Use the users' home directory for something"
  block:
    - name: Executing commands from specified users
      block:
        - name: "Get users' homedir back"
          become: true
          become_user: "{{ item }}"
          become_flags: "-iH"
          check_mode: false
          command: >-
            echo "{{ item }}: $HOME"
          changed_when: false
          with_items:
            - root
            - ec2-user
          register: users_homedir_retrieve
        - name: Compute and register the results
          ansible.builtin.set_fact:
            users_homedir: >-
              {{
                users_homedir_retrieve
                | community.general.json_query('results[].stdout')
                | map('from_yaml')
                | combine
              }}
        - name: Do your thing!
          become: true
          become_user: "{{ item.key }}"
          ansible.builtin.file:
            path: "{{ item.value }}/placeholder"
            state: touch
          with_dict: "{{ users_homedir }}"
    - name: "From the system's entries"
      block:
        - name: "Get raw information from the system's entries"
          ansible.builtin.getent:
            database: passwd
            key: "{{ item }}"
            split: ":"
          with_items:
            - root
            - ec2-user
          register: users_entries
        - name: Compute and register the results
          ansible.builtin.set_fact:
            users_info: >-
              {{
                users_entries
                | community.general.json_query('results[].ansible_facts.getent_passwd[]')
                | combine
              }}
        - name: Do your thing!
          ansible.builtin.file:
            path: "{{ item.value[4] }}/placeholder"
            owner: "{{ item.key }}"
            state: touch
          with_dict: "{{ users_info }}"

- name: Cronjobs
  block:
    - name: At specific times
      become: true
      ansible.builtin.cron:
        name: Prometheus manual data backup
        cron_file: prometheus-manual-data-backup

        # Mind this is based on the hosts' time.
        hour: 4
        minute: 0

        user: root
        job:
          # - Keep '%' characters escaped or they'll be treated as newlines.
          # - Archive creation returns 1 if it detects changes to read files.
          #   Using ';' instead of '&&' to ignore.
          >
            FILENAME="/tmp/prometheus-data-$(date +'\%s-\%F-\%H-\%m-\%S').tar.gz"
            && tar -czf "$FILENAME" '/var/lib/prometheus/data'
            ; tar -tf "$FILENAME" > '/dev/null'
            && aws s3 cp "$FILENAME" 's3://backups/prometheus/'
            && rm "$FILENAME"

- name: Error handling in blocks
  block:
    - name: This executes normally
      ansible.builtin.debug:
        msg: I execute normally
    - name: This errors out
      ansible.builtin.command: "/bin/false"
    - name: This never executes
      ansible.builtin.debug:
        msg: I never execute due to the above task failing
  rescue:
    - name: This executes if any errors arose in the block
      ansible.builtin.debug:
        msg: I caught an error and can do stuff here to fix it
  always:
    - name: This always executes
      ansible.builtin.debug:
        msg: I always execute
